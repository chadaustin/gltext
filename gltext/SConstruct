import os, string, sys
pj = os.path.join

# Pull in the AutoDist module
sys.path = ['build'] + sys.path
from AutoDist import *

EnsureSConsVersion(0, 90)

# Check for options
debug   = ARGUMENTS.get('debug', 0)
profile = ARGUMENTS.get('profile', 0)

# Check for an install prefix
if ARGUMENTS.get('prefix'):
   Prefix(ARGUMENTS['prefix'])


def BuildEnvironment():
   "Builds a base environment for other modules to build on."
   global optimize, profile

   env = Environment(ENV=os.environ)

   if env['CXX'] == 'g++':
      env.Append(CXXFLAGS=['-Wall', '-Wno-non-virtual-dtor'])

   if env['CXX'] == 'CC':    # test for non-gcc IRIX
      env.Append(CXXFLAGS=['-woff', '3505'])

   if debug:
      env.Append(CXXFLAGS=['-DDEBUG', '-g'])
   else:
      env.Append(CXXFLAGS=['-DNDEBUG', '-O2'])

   if profile:
      env.Append(CXXFLAGS=['-pg'],
                 LINKFLAGS=['-pg'])

   return env


def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   cmd = WhereIs(command)
   if cmd is None:
      print "Error: Could not find %s" % command
      sys.exit(-1)

   # Run the command
   cmd = cmd + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env.Append(CPPPATH = [arg[2:]])
         elif option == 'L':
            env.Append(LIBPATH = [arg[2:]])
         elif option == 'l':
            env.Append(LIBS = [arg[2:]])
         else:
            env.Append(CXXFLAGS = [arg])
      else:
         # Must be a static library, add it to the libs
         env.Append(LIBS = [arg])

def SetupFreeType(env):
   "Sets up the given environment for FreeType"
   ParseConfig(env, 'freetype-config', Split('--cflags --libs'))

def SetupCppUnit(env):
   "Sets up the given environment for CppUnit"
   ParseConfig(env, 'cppunit-config', Split('--cflags --libs'))

def SetupOpenGL(env):
   "Sets up the given environment to be able to build with OpenGL"
   if sys.platform == 'cygwin':                      # CYGWIN
      env.Append(LIBS=['opengl32', 'glu32'])
   elif string.find(sys.platform, 'irix') != -1:     # IRIX
      env.Append(LIBS=['GLU', 'GL', 'X11', 'Xmu'])
   else:                                             # GENERIC (Linux?)
      env.Append(LIBS=['GLU', 'GL'])

# The examples need a tool to set up GLText.
def SetupGLText(env):
   env.Append(CPPPATH = ['#src'],
              LIBPATH = ['#src'],
              LIBS = ['gltext'])

def SetupGLUT(env):
   "Sets up the given environment to be able to build with GLUT"
   if sys.platform == 'cygwin':                      # CYGWIN
      env.Append(LIBS=['glut32'])
   elif string.find(sys.platform, 'irix') != -1:     # IRIX
      env.Append(LIBS=['glut'])
   else:                                             # GENERIC (LINUX?)
      env.Append(LIBS=['glut'])

def GetGLTextVersionString():
   import re
   contents = open('src/gltext.cpp', 'r').read()
   exp = r'.*return +"(\d+\.\d+\.\d+)".*'
   version = re.compile(exp, re.DOTALL).sub(r'\1', contents)
   return version


Export('ParseConfig')
Export('SetupGLText')
Export('SetupFreeType SetupCppUnit')
Export('SetupGLUT SetupOpenGL')

baseEnv = BuildEnvironment()
Export('baseEnv')


# Create the gltext package
pkg = Package('gltext', GetGLTextVersionString())
pkg.addExtraDist(Split("""
   AUTHORS
   ChangeLog
   COPYING
   README
   SConstruct
   build/AutoDist.py
   doc/release_howto.txt
   doc/tutorial.txt
   examples/SConscript
   examples/alpha/SConscript
   examples/fps/SConscript
   examples/simple/SConscript
   examples/sizes/SConscript
   src/SConscript
   test/SConscript
   vc7/gltext.sln
   vc7/example_alpha/example_alpha.vcproj
   vc7/example_fps/example_fps.vcproj
   vc7/example_simple/example_simple.vcproj
   vc7/example_sizes/example_sizes.vcproj
   vc7/gltext/gltext.vcproj"""))
Export('pkg')

SConscript(dirs = Split('src test examples'))


pkg.build()
MakeSourceDist(pkg, baseEnv)
