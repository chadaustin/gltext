import os, string, sys
pj = os.path.join

# Pull in the AutoDist module
sys.path = ['build'] + sys.path
from AutoDist import *


# Check for optimize option
optimize = 0
if ARGUMENTS.get('opt', 0):
   optimize = 1

# Check for profile option
profile = 0
if ARGUMENTS.get('profile', 0):
   profile = 1

# Check for an install prefix
if ARGUMENTS.get('prefix'):
   Prefix(ARGUMENTS['prefix'])


def BuildBaseEnvironment():
   "Builds a base environment for other modules to build on."
   global optimize, profile

   CXX = WhereIs('g++3') or 'g++'
   LINK = CXX
   CXXFLAGS = ['-Wall', '-Wno-non-virtual-dtor']
   LINKFLAGS = []

   if optimize:
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-DDEBUG', '-g'])

   if profile:
      CXXFLAGS.extend(['-pg'])
      LINKFLAGS.extend(['-pg'])

   env = Environment(
      ENV = os.environ,
      CXX = CXX,
      LINK = LINK,
      CXXFLAGS = CXXFLAGS,
      LINKFLAGS = LINKFLAGS,
   )

   return env


def BuildIRIXEnvironment():
   "Builds an environment for IRIX that other modules can build on."
   return Environment(ENV = os.environ,
                      CPPPATH = [Dir('third-party-sgi/include')],
                      LIBPATH = [Dir('third-party-sgi/lib32')])


def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   cmd = WhereIs(command)
   if cmd is None:
      print "Error: Could not find %s" % command
      sys.exit(-1)

   # Run the command
   cmd = cmd + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env.Append(CPPPATH = [arg[2:]])
         elif option == 'L':
            env.Append(LIBPATH = [arg[2:]])
         elif option == 'l':
            env.Append(LIBS = [arg[2:]])
         else:
            env.Append(CXXFLAGS = [arg])
      else:
         # Must be a static library, add it to the libs
         env.Append(LIBS = [arg])

def SetupFreeType(env):
   "Sets up the given environment for FreeType"
   ParseConfig(env, 'freetype-config', Split('--cflags --libs'))

def SetupCppUnit(env):
   "Sets up the given environment for CppUnit"
   ParseConfig(env, 'cppunit-config', Split('--cflags --libs'))

def SetupOpenGL(env):
   "Sets up the given environment to be able to build with OpenGL"
   # CYGWIN
   if sys.platform == 'cygwin':
       OPENGL_LIBS = ['opengl32', 'glu32']

   # IRIX
   elif string.find(sys.platform, 'irix') != -1:
       OPENGL_LIBS = ['GLU', 'GL', 'X11', 'Xmu']

   # GENERIC (LINUX?)
   else:
       OPENGL_LIBS = ['GLU', 'GL']

   # Make sure the environment has LIBS defined
   if not env.Dictionary().has_key('LIBS'):
      env['LIBS'] = []

   # Add in the OpenGL libs to the environment
   env['LIBS'].extend(OPENGL_LIBS)

def SetupGLUT(env):
   "Sets up the given environment to be able to build with GLUT"
   # CYGWIN
   if sys.platform == 'cygwin':
       GLUT_LIBS = ['glut32']

   # IRIX
   elif string.find(sys.platform, 'irix') != -1:
       GLUT_LIBS = ['glut']

   # GENERIC (LINUX?)
   else:
       GLUT_LIBS = ['glut']

   # Make sure the environment has LIBS defined
   if not env.Dictionary().has_key('LIBS'):
      env['LIBS'] = []

   # Add in the GLUT libs to the environment
   env['LIBS'].extend(GLUT_LIBS)

def GetGLTextVersionString():
   import re
   contents = open('src/gltext.cpp', 'r').read()
   version = re.compile(r'.*return +"(\d+\.\d+\.\d+)".*', re.DOTALL).sub(r'\1', contents)
   return version


Export('ParseConfig')
Export('SetupFreeType SetupCppUnit')
Export('SetupGLUT SetupOpenGL')

# Create and build the base environment
if string.find(sys.platform, 'irix') != -1:
   baseEnv = BuildIRIXEnvironment()
else:
   baseEnv = BuildBaseEnvironment()
   
Export('baseEnv')

# Create the gltext package
pkg = Package('gltext', GetGLTextVersionString())
pkg.addExtraDist(Split("""
   AUTHORS
   ChangeLog
   COPYING
   README
   SConstruct
   build/AutoDist.py
   examples/SConscript
   examples/simple/SConscript
   examples/sizes/SConscript
   src/SConscript
   test/SConscript
   vc7/example_simple.vcproj
   vc7/example_sizes.vcproj
   vc7/gltext.sln
   vc7/gltext.vcproj
"""))
Export('pkg')

subdirs = Split('src test examples')

Default('.')

# Recurse
SConscript(dirs = subdirs)

pkg.build()
MakeSourceDist(pkg)
